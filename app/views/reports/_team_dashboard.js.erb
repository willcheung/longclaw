// Shared metric update code (left panel) between team_dashboard.html.erb & td_sort_data.js.erb
var chart = $('#left-chart').highcharts();

//clear all old series
while(chart.series.length > 0) {
  chart.series[0].remove();
}

<% if @data.present? %>
  chart.xAxis[0].setCategories(<%= @data.map(&:name).to_json.html_safe %>, false);

  // Add the data via series
  <% if @metric == ReportsController::TEAM_DASHBOARD_METRIC[:activities_last14d] %>
    // chart.legend.update({enabled: true});

    <% @categories.each.with_index do |c, i| %>
    chart.addSeries({
      name: "<%= c %>",
      color: "<%= highcharts_series_color(c) %>", //set color according to category
      <%= 'showInLegend: false,' if c.blank? %>
      data: [ 
      <% @data.each do |d| %>
        <% m = d.y.find{|m| m.category == c} if d.y.present? %>  //find metric for this user
        {
          y: <%= (m.present? && m.num_activities.present?) ? m.num_activities : 0 %>,
          id: "<%= d.id %>"
        }, 
      <% end if @data.present? %> 
      ]
    }, false);
    <% end unless @categories.blank? %>
  <% elsif @metric == ReportsController::TEAM_DASHBOARD_METRIC[:time_spent_last14d] %>
    // chart.legend.update({enabled: true});
    <% @categories.each do |c| %>
    chart.addSeries({
      name: "<%= c %>",
      color: "<%= highcharts_series_color(c) %>",  //set color according to category
      tooltip: {
        pointFormatter: function() {
          return '<span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>' + convert_secs_to_hhmm(this.y) + '</b>';
        }
      },
      <%= 'showInLegend: false,' if c.blank? %>
      data: [ 
      <% @data.each do |d| %>
      {
        y: <%= d.y[c] %>,
        id: "<%= d.id %>"
      },
      <% end %> 
      ]
    }, false);
    <% end unless @categories.blank? %>
  <% else %>
    // chart.legend.update({enabled: false});
    chart.addSeries({
      name: '<%= @metric.html_safe %>',
      color: '<%= highcharts_series_color() %>',
      <% if @metric == ReportsController::TEAM_DASHBOARD_METRIC[:win_rate] %>
      tooltip: {
        pointFormatter: function() {
          return '<span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>' + this.y + '%</b>';
        }
      },
      <% end %>
      // showInLegend: false,
      data: [ <% @data.each do |d| %>
      {
        y: <%= d.y %>,
        id: "<%= d.id %>"
      },
      <% end %> ]
    }, false);
  <% end %>

  // Set/reset the axis labels and subtitles on chart
  <% if @metric == ReportsController::TEAM_DASHBOARD_METRIC[:time_spent_last14d] %>
    chart.yAxis[0].update({
      stackLabels: {
        enabled: true,
        formatter: function () {
          return convert_secs_to_hhmm(this.total);
        }
      }
    });

    chart.subtitle.update({
      text: '(in hh:mm)'
    });
  <% elsif @metric == ReportsController::TEAM_DASHBOARD_METRIC[:win_rate] %>
    chart.yAxis[0].update({
      stackLabels: {
        enabled: true,
        formatter: function () {
          return this.total + "%";
        }
      }
    });
  <% else %>
    reset_labels_on_axis(chart.yAxis[0]);
    reset_subtitles_on_chart(chart);
  <% end %>

<% else %> // if @data not present
  // reset_labels_on_axis(chart.yAxis[0]);
  reset_subtitles_on_chart(chart);
<% end %>

//console.log("datamax=" + chart.yAxis[0].dataMax);
chart.setSize(undefined, 70 + Math.min(1150, <%= @data.size %> * 110)); //set graph height

// <% @data.each do |d| %>console.log("<%= d.name.html_safe %>: <%= d %>");<% end %>

// handle clicking on user label
$('.highcharts-xaxis-labels text tspan').click(function() {
    $.get("td_user_data/" + get_category_uuid($(this).text()), function (data) {
        $("#user-data").html(data);
        renderUserCharts(this.y);
    })
});
$('.highcharts-xaxis-labels text').css("cursor", "pointer");

function get_category_uuid (catname) {
  <% if @data.blank? %>
    return "";
  <% else %>
    var map = {
    <% @data.each do |d| %>
      "<%= d.name.html_safe %>": "<%= d.id %>",
    <% end %>
    };

    catname = catname.trim();
    // In case of axis label truncation and wrapping, implement "close-enough" match
    var match = map[catname];
    if (!match){
      // Attempt to match the max number of chars, so keep truncating the string until matched
      var keys = Object.keys(map);
      for (var e = 0; ; e++) {
        var keyname;
        var found_nonempty_key = false;
        for (k in Object.keys(map)) {
          keyname = keys[k];
          if (keyname.substring(0, keyname.length - e) == catname)
              return map[keyname];
          found_nonempty_key = found_nonempty_key || (keyname.length - e > 0);
        }
        if (!found_nonempty_key) // if all keys are truncated to 0 length, quit!
          break;
      }
      return ""; // cannot find category
    } else {
      return match;
    }
  <% end %>
}
