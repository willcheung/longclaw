// Shared metric update code (left panel) between team_dashboard.html.erb & td_sort_data.js.erb
var chart = $('#left-chart').highcharts();

//clear all old series
while(chart.series.length > 0) {
  chart.series[0].remove();
}

<% if @dashboard_data.sorted_by.data.present? %>
  chart.xAxis[0].setCategories(<%= @dashboard_data.sorted_by.data.map(&:name).to_json.html_safe %>, false);

  // Add the data via series
  <% @dashboard_data.each do |key, value| %>
    <% if value.type == ReportsController::TEAM_DASHBOARD_METRIC[:activities_last14d] %>
      <% value.categories.each.with_index do |c, i| %>
      chart.addSeries({
        name: "<%= c %>",
        color: "<%= highcharts_series_color(c) %>", //set color according to category
        <%= 'showInLegend: false,' if key == 'sorted_by' || c.blank? %>
        <%= 'yAxis: 1,' if key == 'metric' %>
        data: [
        <% value.data.each do |d| %>
          <% m = d.y.find{|m| m.category == c} if d.y.present? %>  //find metric for this user
          {
            y: <%= (m.present? && m.num_activities.present?) ? m.num_activities : 0 %>,
            id: "<%= d.id %>"
          },
        <% end if value.data.present? %>
        ]
      }, false);
      <% end unless value.data.blank? %>
    <% elsif value.type == ReportsController::TEAM_DASHBOARD_METRIC[:time_spent_last14d] %>
      <% value.categories.each do |c| %>
      chart.addSeries({
        name: "<%= c %>",
        color: "<%= highcharts_series_color(c) %>",  //set color according to category
        tooltip: {
          pointFormatter: function() {
            return '<span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>' + convert_secs_to_hhmm(this.y) + '</b>';
          }
        },
        <%= 'showInLegend: false,' if key == 'sorted_by' || c.blank? %>
        <%= 'yAxis: 1,' if key == 'metric' %>
        data: [
        <% value.data.each do |d| %>
        {
          y: <%= d.y[c] %>,
          id: "<%= d.id %>"
        },
        <% end %>
        ]
      }, false);
      <% end unless value.data.blank? %>
    <% else %>
      chart.addSeries({
        name: '<%= value.type.html_safe %>',
        color: '<%= highcharts_series_color(key) %>',
        <% if value.type == ReportsController::TEAM_DASHBOARD_METRIC[:win_rate] %>
          tooltip: {
            pointFormatter: function() {
              return '<span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>' + this.y + '%</b>';
            }
          },
        <% elsif value.type == ReportsController::TEAM_DASHBOARD_METRIC[:closed_won] %>
          tooltip: {
            pointFormatter: function() {
              return '<span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>$' + numberWithCommas(this.y) + '</b>';
            }
          },
        <% end %>
        <%= 'showInLegend: false,' if key == 'sorted_by' %>
        <%= 'yAxis: 1,' if key == 'metric' %>
        dataLabels: {
        <% if value.type == ReportsController::TEAM_DASHBOARD_METRIC[:win_rate] %>
          format: '{y}%',
        <% elsif value.type == ReportsController::TEAM_DASHBOARD_METRIC[:closed_won] %>
          formatter: function () {
            return "$"+numberWithCommas(this.y);
          },
        <% end %>
          enabled: true,
          align: '<%= key == "metric" ? "left" : "right" %>',
          style: {
            color: (Highcharts.theme && Highcharts.theme.textColor) || 'white'
          }
        },
        data: [ <% value.data.each do |d| %>
        {
          y: <%= d.y %>,
          id: "<%= d.id %>"
        },
        <% end %> ]
      }, false);

    <% end %>

    var axis = chart.yAxis[<%= key == 'metric' ? 1 : 0 %>]
    // Set/reset the axis labels and subtitles on chart
    <% if value.type == ReportsController::TEAM_DASHBOARD_METRIC[:time_spent_last14d] %>
      axis.update({
        stackLabels: {
          enabled: true,
          align: 'center',
          x: <%= '-' if key == 'sorted_by' %>axis.pos,
          style: {
            color: (Highcharts.theme && Highcharts.theme.textColor) || 'white'
          },
          formatter: function () {
            return convert_secs_to_hhmm(this.total, true);
          }
        }
      });
    <% elsif value.type == ReportsController::TEAM_DASHBOARD_METRIC[:activities_last14d] %>
      axis.update({
        stackLabels: {
          enabled: true,
          align: 'center',
          x: <%= '-' if key == 'sorted_by' %>axis.pos,
          style: {
                color: (Highcharts.theme && Highcharts.theme.textColor) || 'white'
          },
          formatter: function () {
            return this.total;
          }
        }
      });
    <% else %>
      axis.update({
        stackLabels: {
          enabled: false
        }
      });
      // reset_labels_on_axis(axis);
      reset_subtitles_on_chart(chart);
    <% end %><!-- if value.type == ?? -->

  <% end %>

<% else %> // if @dashboard_data.sorted_by.data not present
  // reset_labels_on_axis(chart.yAxis[0]);
  reset_subtitles_on_chart(chart);
<% end %>

chart.setSize(undefined, 50 + Math.min(1150, <%= @dashboard_data.sorted_by.data? ? @dashboard_data.sorted_by.data.size : 0 %> * 90)); //set graph height

// handle clicking on user label
$('.highcharts-xaxis-labels text tspan').click(function() {
    $.get("td_user_data/" + get_category_uuid($(this).text()), function (data) {
        $("#user-data").html(data);
        renderUserCharts(this.y);
    })
});
$('.highcharts-xaxis-labels text').css("cursor", "pointer");

function get_category_uuid (catname) {
  <% if @dashboard_data.sorted_by.data.blank? %>
    return "";
  <% else %>
    var map = {
    <% @dashboard_data.sorted_by.data.each do |d| %>
      "<%= d.name.html_safe %>": "<%= d.id %>",
    <% end %>
    };

    catname = catname.trim();
    // In case of axis label truncation and wrapping, implement "close-enough" match
    var match = map[catname];
    if (!match){
      // Attempt to match the max number of chars, so keep truncating the string until matched
      var keys = Object.keys(map);
      for (var e = 0; ; e++) {
        var keyname;
        var found_nonempty_key = false;
        for (k in Object.keys(map)) {
          keyname = keys[k];
          if (keyname.substring(0, keyname.length - e) == catname)
              return map[keyname];
          found_nonempty_key = found_nonempty_key || (keyname.length - e > 0);
        }
        if (!found_nonempty_key) // if all keys are truncated to 0 length, quit!
          break;
      }
      return ""; // cannot find category
    } else {
      return match;
    }
  <% end %>
}

<% if @dashboard_data.sorted_by.data.present? && @dashboard_data.sorted_by.data.length == 25 %>
$('#left-chart-trunc-message').show();
<% else %>
$('#left-chart-trunc-message').hide();
<% end %>