<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Opportunities Dashboard</h2>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
  <div class="row filter-space">
    <strong>Filter:</strong>
  </div>
  <div class="row filter-space filter-group">
      <!-- Account Type -->
      <!--<select id="account-filter" class="category_filter col-md-3" data-placeholder="Select Account Type">-->
           <!--<option value=""></option>  &lt;!&ndash; no filter &ndash;&gt;-->
          <!--< % @account_types.each do |k,v| %>-->
            <!--<option < % if params[:account] == v %> selected < % end %> >< %= v %></option>-->
          <!--< % end %>-->
      <!--</select>-->
      <!-- Opportunity Type -->
      <!--<select id="category-filter" class="category_filter col-md-3" data-placeholder="Select Opportunity Type">-->
          <!--<option value=""></option> &lt;!&ndash; no filter &ndash;&gt;-->
          <!--< % @opportunity_types.each do |k,v|    %>-->
            <!--<option < % if params[:category] == v %> selected < % end %> >< %= v %></option>-->
          <!--< % end %>-->
      <!--</select>-->
      <form class="col-md-3" method='get' id='multiselect-filter-form' style="padding: 0 5px 0 0px">
        <!-- Owner -->
        <select id="owner-filter" class="category_filter" multiple data-placeholder="  Select Owner" style="width: 100%">
            <option value="None"></option> <!-- no filter -->
            <option value="<%= current_user.id %>" <% if params[:owner].present? && (params[:owner].include? current_user.id) %> selected <% end %> >Me (<%= get_full_name(current_user) %>)</option>
            <% @users_reverse.each do |u| %>
                <% if u[0] != current_user.id %>
                    <option value="<%= u[0] %>" <% if params[:owner].present? && (params[:owner].include? u[0]) %> selected <% end %> >
                        <%= u[1] %>
                    </option>
                <% end %>
            <% end %>
            <option value="None" <% if params[:owner]=="None" %> selected  <% end %> >Unassigned</option>
        </select>
      </form>
      <select id="close-date-filter" class="category_filter col-md-3" data-placeholder="Select Close Date">
          <option value="Any"></option> <!-- no filter -->
          <optgroup label="By Close Date">
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:Open] %> ><%= Project::CLOSE_DATE_RANGE[:Open] %></option>
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:Closed] %> ><%= Project::CLOSE_DATE_RANGE[:Closed] %></option>
          </optgroup>
          <optgroup label="Quarter">
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:ThisQuarter] %> ><%= Project::CLOSE_DATE_RANGE[:ThisQuarter] %></option>
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:LastQuarter] %> ><%= Project::CLOSE_DATE_RANGE[:LastQuarter] %></option>
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:NextQuarter] %> ><%= Project::CLOSE_DATE_RANGE[:NextQuarter] %></option>
          </optgroup>
          <optgroup label="x-To-Date">
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:QTD] %> ><%= Project::CLOSE_DATE_RANGE[:QTD] %></option>
              <option <%= 'selected' if params[:close_date] == Project::CLOSE_DATE_RANGE[:YTD] %> ><%= Project::CLOSE_DATE_RANGE[:YTD] %></option>
          </optgroup>
      </select>
      <!-- <div class="col-md-3"></div> -->
      <button style="border-radius: 5px; margin-left: 1em; padding: 5px 10px" onclick="setFilterParamsAndRefreshData();"><strong>Apply all filters&nbsp;</strong><i class="fa fa-filter" aria-hidden="true"></i></button>
      <button style="border-radius: 5px; margin-left: 1em; padding: 5px 10px" title="Reset filters" onclick="resetFilters();"><strong>Reset filters&nbsp;&nbsp;</strong></button>

  </div>

  <!-- Top Dashboard Panel: (3) Salesforce-linked Forecast and Stage reports -->
  <div class="row border-bottom ">
      <div class="col-lg-3">
          <div class="ibox float-e-margins">
              <div id="closedwon-box"></div>
          </div>
      </div>

      <div class="col-lg-3">
          <div class="ibox float-e-margins">
              <div class='ibox-title'>
                  <h5>Deals by Forecast <small>(Click bar to filter)</small></h5>
              </div>
              <div id="forecast-chart" class="ibox-content forecast-chart" style="height:220px;padding-bottom:0"></div>
          </div>
      </div>

      <div class="col-lg-6">
          <div class="ibox float-e-margins">
              <div class='ibox-title'>
                  <h5>Deals by Stage <small>(Click bar to filter)</small></h5>
              </div>
              <div id="stage-chart" class="ibox-content stage-chart" style="height:220px;padding-bottom:0"></div>
          </div>
      </div>
  </div>

  <div class="row border-bottom white-bg dashboard-header">
      <!-- LEFT (metric sort) -->
      <div class="col-lg-5">
          <h4 class="m-l-md">Metric:
              <select id="sort-type" class="metric_filter col-lg-8" data-placeholder="Select Metric">
              <% ReportsController::ACCOUNT_DASHBOARD_METRIC.each do |k,label| %>
                  <option <%= "selected" if params[:sort] == label %>><%= label %></option>
              <% end %>
              </select>
          </h4>
          <div id="left-chart" class="left-chart" style="height:1200px"></div>
          <div id="left-chart-trunc-message" class="text-center">(only showing Top 25)</div>
      </div>

      <!-- RIGHT (account/opportunity detail) -->
      <div class="col-lg-7" style="margin-top:45px">
          <div id="account-data">
              <div class="row" style="margin-top:50px">
                  <h3>&larr; Click on a bar/label to see details about the opportunity.</h3>
              </div>
          </div>
      </div>
    </div>
</div>

<%= render "teaser" if current_user.trial? %>

<script type="text/javascript">
    $(document).ready(function() {
        $('#sort-type, #close-date-filter').change( function () {
            // Clear Opportunity data ("right") chart
            $('#account-data').html("<div class=row style=margin-top:50px;><h3>&larr; Click on a bar/label to see details about the opportunity.</h3></div>");
            setFilterParamsAndRefreshData();
        });

        // #owner-filter
        $('#multiselect-filter-form').on("submit", function() {
            setFilterParamsAndRefreshData();
            return false;
        });

        $('.filter-group').hover( function () {
          $('.chosen-container-single').css('cursor', 'pointer');
          $('.chosen-single').css('cursor', 'pointer');
        });

        $('#forecast-chart').highcharts({
            chart: {
                type: 'column'
            },
            title: {
                text: ''
            },
            credits: {
                enabled: false
            },
            xAxis: {
                crosshair: true,
                labels: {
                    style: {
                        fontSize: '9px'
                    }
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                },
                labels: {
                   enabled: false
               },
               stackLabels: {
                    enabled: true,
                    formatter: function () {
                        return "$"+large_number_to_human_signif_digits(this.total);
                    },
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                }
            },
            tooltip: {
                enabled: true,
                formatter: function () {
                    return '$' + large_number_to_human_signif_digits(this.total) + ' in ' + this.x;
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    pointPadding: 0.2,
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false,
                        format: '${y}',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                        }
                    }
                },
                 series: {
                    pointPadding: 0.1,
                    groupPadding: 0,
                    borderWidth: 0,
                    point: {
                        events: {
                            click: function () {
                                $('#account-data').html("<div class=row style=margin-top:50px;><h3>&larr; Click on a bar/label to see details about the opportunity.</h3></div>");

                                this.select(!this.selected, true);
                                // setFilterParamsAndRefreshData();
                            }
                        }
                    }
                }
            }
        });

        $('#stage-chart').highcharts({
            chart: {
                type: 'column'
            },
            title: {
                text: ''
            },
            credits: {
                enabled: false
            },
            xAxis: {
                crosshair: true,
                labels: {
                    style: {
                        fontSize: '9px'
                    }
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                },
                labels: {
                   enabled: false
                },
                stackLabels: {
                    enabled: true,
                    formatter: function () {
                        //return Highcharts.numberFormat(this.total, 0, null, "");
                        return "$"+large_number_to_human_signif_digits(this.total);
                    },
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                }
            },
            tooltip: {
                enabled: true,
                formatter: function () {
                    return '$' + large_number_to_human_signif_digits(this.total) + ' in ' + this.x;
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    pointPadding: 0.2,
                    borderWidth: 0,
                    dataLabels: {
                        format: '${y}',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                        }
                    }
                },
                series: {
                    pointPadding: 0.1,
                    groupPadding: 0.1,
                    borderWidth: 0,
                    point: {
                       events: {
                           click: function () {
                               $('#account-data').html("<div class=row style=margin-top:50px;><h3>&larr; Click on a bar/label to see details about the opportunity.</h3></div>");

                               this.select(!this.selected, true);
                               // setFilterParamsAndRefreshData();
                           }
                       }
                    }
                }
            }
        });

        $('#left-chart').highcharts({
            chart: {
                type: 'bar'
            },
            title: {
                text: ''
            },
            xAxis: {
                max: undefined,
                crosshair: true,
                labels: {
                    formatter: function () {
                        // this.value = [project_name, deal_size, close_date, project_id]
                        return "<b>" + this.value[0] + "</b><br/>" + this.value[1] + (this.value[1] != "" && this.value[2] != "" ? ", " : "" ) + this.value[2];
                    }
                }
            },
            yAxis: {
                min: undefined,
                //max: undefined,
                opposite: true,
                title: {
                    text: ''
                },
                gridLineWidth: 0,
                labels: { 
                    enabled: false
                },
                stackLabels: {
                    enabled: true,
                    formatter: function () {
                        return large_number_to_human_signif_digits(this.total);
                    }
                }
            },
            tooltip: {
                headerFormat:  '',
                pointFormatter: function() {
                    // this.category = [project_name, deal_size, close_date]
                    var label = '<span style="font-size: 10px">' + this.category[0] + '</span><br/><span style="color:' + this.color + '">\u25CF</span>  ' + this.series.name + ': <b>';
                    if (this.series.name == '<%= ReportsController::ACCOUNT_DASHBOARD_METRIC[:deal_size] %>')
                      label += '$'+large_number_to_human_signif_digits(this.y)+'</b>';
                    else
                      label += this.y+'</b>';
                    return label;
                }
            },
            legend: {
                enabled: true,
                verticalAlign: 'top',
                itemStyle: {
                    fontWeight: 'light',
                    fontSize: 12         
                }
            },
            plotOptions: {
                series: {
                    stacking: 'normal',
                    cursor: 'pointer',
                    maxPointWidth: 75,
                    point: {
                        events: {
                            click: function () {
                                $.get("ad_account_data/" + this.options.id, function (data) {
                                    $("#account-data").html(data);
                                    renderProjectCharts(this.y);
                                });
                            }
                        }
                    }
                }
            },
            credits: {
                enabled: false
            }
        });

        // Highcharts.setOptions({
        //     global: {
        //         timezoneOffset: <%= @time_zone_offset_min %>
        //     }
        // });

        <%= render partial: "reports/accounts_dashboard_top.js" %>
        <%= render partial: "reports/accounts_dashboard.js" %>
    });

    // Build URL for AJAX call for filtered data
    function setFilterParamsAndRefreshData() {
        var params = {};
        params.owner = $('#owner-filter').val() ? $('#owner-filter').val() : "";
        params.close_date = $('#close-date-filter').val() ? $('#close-date-filter').val() : "Any";
        params.stage = getSelection('#stage-chart');
        params.forecast = getSelection('#forecast-chart');

        var url = "ad_sort_data/" + encodeURIComponent($('#sort-type').val()) + "?" + $.param(params);
        $.getScript(url);
    };
</script>
